generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
  PARENT
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?

  teamMembers       TeamMember[]
  accounts          Account[]
  sessions          Session[]
  invitations       Invitation[]
  whiteboards       Whiteboard[]      @relation("UserWhiteboards")
  whiteboardEntries WhiteboardEntry[] @relation("UserWhiteboardEntries")
}

model Team {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  whiteboards Whiteboard[] @relation("TeamWhiteboards")
  teamMembers TeamMember[]
  invitations Invitation[]
  apiKeys     ApiKey[]

  @@index([name])
}

model TeamMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String   @db.ObjectId
  userId    String   @db.ObjectId
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Whiteboard {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String // The name or title of the whiteboard
  teamId      String            @db.ObjectId // The team (classroom) this whiteboard belongs to
  createdById String            @db.ObjectId // The student who created the whiteboard
  entries     WhiteboardEntry[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())

  team      Team @relation("TeamWhiteboards", fields: [teamId], references: [id], onDelete: Cascade)
  createdBy User @relation("UserWhiteboards", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([createdById])
}

model WhiteboardEntry {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  whiteboardId String   @db.ObjectId // The whiteboard this entry belongs to
  createdById  String   @db.ObjectId // The student who created the entry
  content      String // The content of the entry (text, drawing reference, etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  whiteboard Whiteboard @relation(fields: [whiteboardId], references: [id], onDelete: Cascade)
  createdBy  User       @relation("UserWhiteboardEntries", fields: [createdById], references: [id], onDelete: Cascade)

  @@index([whiteboardId])
  @@index([createdById])
}

model Invitation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId         String   @db.ObjectId
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  teamId     String    @db.ObjectId
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  billingScheme String
  currency      String
  serviceId     String   @db.ObjectId
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}
